{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["startText","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","document","getElementById","innerHTML","marked","componentDidUpdate","state","text","__html","textChange","bind","assertThisInitialized","event","html","target","value","toString","setState","react_default","a","createElement","className","onChange","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAKMA,EAAS,q7BA0CMC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,kBAAoB,WAClBC,SAASC,eAAe,WAAWC,UAAYC,IAAOd,IAdrCG,EAgBnBY,mBAAqB,WACnBJ,SAASC,eAAe,WAAWC,UAAYV,EAAKa,MAAMC,KAAKC,QAf/Df,EAAKa,MAAQ,CACXC,KAAM,CAAEC,OAAQJ,IAAOd,KAEzBG,EAAKgB,WAAahB,EAAKgB,WAAWC,KAAhBhB,OAAAiB,EAAA,EAAAjB,CAAAD,IALDA,0EAORmB,GACT,IAAIC,EAAOT,IAAOQ,EAAME,OAAOC,OAAOC,WACtCpB,KAAKqB,SAAS,CACZV,KAAM,CAAEC,OAAQK,sCAUlB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,YAAUE,SAAU1B,KAAKa,WAAYc,GAAG,SAASR,MAAOzB,KAE1D4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBE,GAAG,oBA1BXC,IAAMC,WCnCnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAAShC,SAASC,eAAe,SD2H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ba2ef8e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from 'marked'\n\n\nconst startText =\n  `# This is a heading\n\n## This is a sub-heading\n  \ncode, \\`console.log(this is code)\\`\n\nthis is multi-line code:\n\\`\\`\\`\nfunction logMe(markDown,isCool) {\n  if (markDown == true && isCool == true) {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \n**bold**  \n_italic_  \n**_both!_**  \n~~strikethrough~~.\n\nThis is a [link](https://www.thunderheaddesign.net)   \n<a href=\"http://www.thunderheaddesign.net/\" target=\"_blank\">this will open the link in a new window</a>\n> \"these are block quotes\"\n\n- And of course there are lists.\n- and another\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. numbered lists are cool\n2. it doesn't matter what order\n2. just put another 2... oops.. it still works\n- dashes work too.\n* ##**Stop!  Kitty Time!**\n\n![kitty picture](https://static1.squarespace.com/static/54e8ba93e4b07c3f655b452e/t/56c2a04520c64707756f4267/1493764650017/?format=500w)\n`\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: { __html: marked(startText) }\n    }\n    this.textChange = this.textChange.bind(this)\n  }\n  textChange(event) {\n    let html = marked(event.target.value).toString()\n    this.setState({\n      text: { __html: html }\n    })\n  }\n  componentDidMount = () => {\n    document.getElementById('preview').innerHTML = marked(startText)\n  }\n  componentDidUpdate = () => {\n    document.getElementById('preview').innerHTML = this.state.text.__html\n  }\n  render() {\n    return (\n      <div className='container'>\n        <div className=\"text-box\">\n          <textarea onChange={this.textChange} id='editor' value={startText} />\n        </div>\n        <div className=\"markdown-window\" id='preview' ></div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}